//import user model, to hash the passwword - bcrypt, jwt - for create and verify JWT

const User = require('../models/User');
const bcrypt = require ('bcrypt');
const jwt = require('jsonwebtoken');


//Register a new user

    const registerUser = async( req , res) =>{
        const{username, email, password} = req.body;

        //need to check that an another user exists with the same email
        try{

            const existingUser = await User.findOne({email});
            if(existingUser) {
                return res.status(400).json({message : 'User already exists'});
        }

        // create  new user with hashed password
        const hashedPassword= await bcrypt.hash(password, 10);

        const newUser= new User({username, email,password :hashedPassword});
        await newUser.save();


        //after creating an account - generate token

        const token = jwt.sign({id : newUser._id}, process.env.JWT_SECRET,
             {expiresIn: '1h'});

             res.status(201).json({message:'User registered successfully',
                token,
                user :{ id: newUser._id,username,email},
             });
    }catch(error){
        res.status(500).json({ message: 'Server error', error: error.message});
    }
    };

    //login user

    const loginUser = async (req, res) =>{
        const{ email, password} = req.body;

        try{
            const user = await User.findOne({email});
            if(!user) return res.status(400).json ({message: 'Invalid email or password'});

                const isMatch = await bcrypt.compare (password, user.password)
                if(!isMatch) return res.status(400).json ({message:  'Invalid password or email'});

     const token = jwt.sign({
        id:user._id},
        process.env.JWT_SECRET,
        {expiresIn: '1h'}
    )

    res.json({
        message: 'Login successful',
        token,
        user: { id : user._id, username: user.username, email: user.email}
    })

    } catch (error){
        res.status(500).json ({message: `Server error`});

    }
};
module.exports = {registerUser, loginUser};